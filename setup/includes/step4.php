<?php
/**
 * This file is part of Helios Calendar, it's use is governed by the Helios Calendar Software License Agreement.
 *
 * @author Refresh Web Development LLC
 * @link http://www.refreshmy.com
 * @copyright (C) 2004-2011 Refresh Web Development
 * @license http://www.helioscalendar.com/license.html
 * @package Helios Calendar
 */
/*
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	|	Modifying or in anyway altering source code contained in this file is 	|
	|	not permitted and violates the Helios Calendar Software License Agreement	|
	|	DO NOT edit or reverse engineer any source code or files with this notice	|
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
	if(!isset($_SESSION['license']) || $_SESSION['license'] == false || !isset($_SESSION['review']) || $_SESSION['review'] == false || !isset($_SESSION['valid']) || $_SESSION['valid'] == false){
		hc_fail();
	} else {
		if(!isset($_POST['firstname'])){?>
			<script src="../inc/javascript/validation.js"></script>
			<script language="JavaScript">
			//<!--
			function validate(){var err = "";err += reqField(document.getElementById("firstname"),"Admin First Name is Required\n");err += reqField(document.getElementById("lastname"),"Admin Last Name is Required\n");err += reqField(document.getElementById("email"),"Admin Email Address is Required\n");if(document.getElementById("email").value != '')err +=validEmail(document.getElementById("email"),"Email Address Format is Invalid\n");err += reqField(document.getElementById("password"),"Admin Password is Required\n");if(err != ""){alert(err);return false;} else {valid_ok(document.getElementById("submit"),"Please Wait...");return true;}}
			//-->
			</script>
			<form name="frm" id="frm" method="post" action="<?php echo CalRoot;?>/setup/index.php?step=4" onsubmit="return validate();">
			<fieldset>
				<b>First Admin Account Settings</b>
				<p>
					Complete the following form to configure your first admin account.
					<br />When setup is complete <b>use this account to login to your admin console the first time</b>.
				</p>
				<p>
					<b>NOTE:</b> The <b>email address</b> entered will be your username.
				</p>
				<label for="firstname">First Name:</label>
				<input name="firstname" id="firstname" type="text" size="20" maxlength="50" value="" autofocus="autofocus" required="required" />
				<label for="lastname">Last Name:</label>
				<input name="lastname" id="lastname" type="text" size="25" maxlength="50" value="" required="required" />
				<label for="email">Email (Username):</label>
				<input name="email" id="email" type="email" size="35" maxlength="100" value="" required="required" />
				<label for="password">Password:</label>
				<input name="password" id="password" type="password" size="15" maxlength="15" value="" required="required" />
			</fieldset>
			<fieldset>
				<b>Optional Statistics Reporting</b>
				<p>
					Refresh Web Development respects your privacy. When enabled <b>anonymous</b> summarized data regarding your use of Helios Calendar is reported once per month.
					Statistics are used only for aggregate statistical analysis as part of generalized reports and aid in the support &amp; development of Helios Calendar.
				</p>
				<p>
					This setting can be changed anytime in the admin console under Settings/Preferences
				</p>
				
				<label for="stats" class="settingsLabel">Report Stats:</label>
				<select name="stats" id="stats">
					<option value="1">Yes, Report Anonymous Stats</option>
					<option value="0">No, Do NOT Report Stats</option>
				</select>
			</fieldset>
			<input name="submit" id="submit" type="submit" value="Setup Database" />
			</form>
<?php	} else {
			eval(base64_decode(''));
		}
	}
?>