<?php
/**
 * This file is part of Helios Calendar, it's use is governed by the Helios Calendar Software License Agreement.
 *
 * @author Refresh Web Development, LLC.
 * @link http://www.refreshmy.com
 * @copyright (C) 2004-2011 Refresh Web Development
 * @license http://www.helioscalendar.com/license.html
 * @package Helios Calendar
 */
/*
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	|	Modifying or in anyway altering source code contained in this file is 	|
	|	not permitted and violates the Helios Calendar Software License Agreement	|
	|	DO NOT edit or reverse engineer any source code or files with this notice	|
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
	if(!isset($_SESSION['license']) || $_SESSION['license'] == false || !isset($_SESSION['good']) || $_SESSION['good'] == false || !isset($_SESSION['valid']) || $_SESSION['valid'] == false){
		fail();
	} else {
		if(!isset($_POST['firstname'])){?>
			<script language="JavaScript">
			//<!--
			function checkEmail(obj) {
				return (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(obj.value)) ? 0 : 1;
			}//end chkEmail
			
			function chkFrm(){
			dirty = 0;
			warn = "Account cannot be created because of the following reasons:";
				if(document.frm.firstname.value == ''){
					dirty = 1;
					warn = warn + '\n*First Name is Required';
				}//end if
				if(document.frm.lastname.value == ''){
					dirty = 1;
					warn = warn + '\n*Last Name is Required';
				}//end if
				if(document.frm.email.value == ''){
					dirty = 1;
					warn = warn + '\n*Email is Required';
				}//end if
				if(document.frm.email.value != '' && checkEmail(document.frm.email) == 1){
					dirty = 1;
					warn = warn + '\n*Email Format is Invalid';
				}//end if
				if(document.frm.password.value == ''){
					dirty = 1;
					warn = warn + '\n*Password is Required';
				}//end if
				if(dirty > 0){
					alert(warn + '\n\nPlease make the required changes and try again.');
					return false;
				} else {
					return true;
				}//end if
			}//end chkFrm
			//-->
			</script>
			<br />
			<form name="frm" id="frm" method="post" action="<?php echo CalRoot;?>/setup/index.php?step=4" onsubmit="return chkFrm();">
			<fieldset>
				<legend>First Admin Account Settings</legend>
				Complete the following fields to configure your first admin account.
				<br />
				When setup is complete <b>use this account to login to your Helios admin console</b>.
				<br /><br />
				<b>NOTE:</b> The <b>email address</b> entered will be your username.
				<br /><br />
				<div class="frmOpt">
					<label for="firstname">First Name:</label>
					<input tabindex="1" size="20" maxlength="50" type="text" name="firstname" id="firstname" value="" class="setupText" />
				</div>
				<div class="frmOpt">
					<label for="lastname">Last Name:</label>
					<input tabindex="2" size="25" maxlength="50" type="text" name="lastname" id="lastname" value="" class="setupText" />
				</div>
				<div class="frmOpt">
					<label for="email">Email (Username):</label>
					<input tabindex="3" size="35" maxlength="100" type="text" name="email" id="email" value="" class="setupText" />
				</div>
				<div class="frmOpt">
					<label for="password">Password:</label>
					<input tabindex="4" size="15" maxlength="15" type="password" name="password" id="password" value="" class="setupText" />
				</div>
			</fieldset>
			<br />
			<fieldset>
				<legend>Optional Statistics Reporting</legend>
				Refresh Web Development respects your privacy. When enabled <b>anonymous</b> summarized data regarding your use of Helios Calendar is reported once per month.
				Statistics are used only for aggregate statistical analysis as part of generalized reports and aid in the support &amp; development of Helios Calendar.
				<br /><br />
				<b>No identifying information is reported.</b> To see data reported move your cursor over the information icon below.
				<br /><br />
				<b>NOTE:</b> this setting can be changed anytime in the admin console under Settings/Preferences
				<br /><br />
				<div class="frmOpt">
					<label for="stats" class="settingsLabel">Report Stats:</label>
					<select name="stats" id="stats">
						<option value="1">Yes, Report Anonymous Stats</option>
						<option value="0">No, Do NOT Report Stats</option>
					</select>
					&nbsp;<?php appInstructionsIcon("Data Reported", "<ul style=\'margins:0;padding: 0px 0px 0px 15px;\'><li>Total Active Events<li>Total Past Events<li>Total Active Admin Users<li>Total Active Newsletter Recipients<li>Total Active Locations<li>Total Active OpenID Users<li>Total Banned OpenID Users<li>Total Event Comments<li>Total Submitted Events<li>Server OS (Windows/Linux/Mac OS/etc)<li>Web Server (Apache/IIS/etc)<li>PHP Version<li>MySQL Version<li>Helios Calendar Version</ul>");?>
				</div>
			</fieldset>
			<br />
			<input tabindex="5" type="submit" name="submit" id="submit" value="Setup Database" class="button" />
			</form>
<?php	} else {	
			echo "<br />";
               eval(base64_decode(''));
		}//end if
	}//end if?>